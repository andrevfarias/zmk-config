/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&ht_kp_sk LSHFT LSHIFT>, <&kt CAPSLOCK>;

            tapping-term-ms = <200>;
        };

        ht_kp_sk: ht_kp_sk {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KP_SK";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        ht_kp_to: ht_kp_to {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KP_TO";
            bindings = <&kp>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
        };

        ht_to_to: ht_to_to {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_TO_TO";
            bindings = <&to>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
        };

        td_gui_mnu: td_gui_mnu {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_GUI_MNU";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI>, <&kp K_APP>;

            tapping-term-ms = <250>;
        };

        ht_mo_to: ht_mo_to {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_MO_TO";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "hold-preferred";
            hold-while-undecided;
        };

        ht_kp_kt: ht_kp_kt {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KP_KT";
            bindings = <&kp>, <&kt>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            hold-while-undecided;
        };

        ht_kp_kp: ht_kp_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KP_KP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "hold-preferred";
        };

        mm_xdiv: mm_xdiv {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_XDIV";
            bindings = <&kp ASTERISK>, <&kp KP_DIVIDE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ht_colonequal_kp: ht_colonequal_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_COLONEQUAL_KP";
            bindings = <&delphi_colon_equal>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };

        mm_tilde_circ: mm_tilde_circ {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_TILDE_CIRC";
            bindings = <&kp TILDE>, <&kp LS(NUMBER_6)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        r_to_base_layer {
            bindings = <&ht_mo_to 0 0>;
            key-positions = <2 4>;
        };

        r_to_fn_num_layer {
            bindings = <&ht_mo_to 2 2>;
            key-positions = <14 16>;
        };

        r_tab {
            bindings = <&kp TAB>;
            key-positions = <21 22>;
        };

        r_bksp {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
        };

        r_del {
            bindings = <&kp DEL>;
            key-positions = <20 21>;
        };

        l_to_adj_layer {
            bindings = <&moto 5>;
            key-positions = <38 37 36>;
        };

        cb_lbrkt {
            bindings = <&kp LBKT>;
            key-positions = <39 7>;
        };

        cb_rbkt {
            bindings = <&kp RBKT>;
            key-positions = <39 8>;
        };

        cb_lpar {
            bindings = <&kp LPAR>;
            key-positions = <39 19>;
        };

        cb_rpar {
            bindings = <&kp RPAR>;
            key-positions = <39 20>;
        };

        cb_lbrc {
            bindings = <&kp LBRC>;
            key-positions = <31 39>;
        };

        cb_rbrc {
            bindings = <&kp RBRC>;
            key-positions = <32 39>;
        };

        r_next_tab {
            bindings = <&kp RC(TAB)>;
            key-positions = <8 9 10>;
        };

        r_prev_tab {
            bindings = <&kp RC(RS(TAB))>;
            key-positions = <9 8 7>;
        };

        r_numpad_layer {
            bindings = <&to 6>;
            key-positions = <39 41>;
        };

        l_next_tab {
            bindings = <&kp LC(TAB)>;
            key-positions = <4 3 2>;
        };

        l_prev_tab {
            bindings = <&kp LC(LS(TAB))>;
            key-positions = <3 2 1>;
        };

        l_next_window {
            bindings = <&kp LA(TAB)>;
            key-positions = <16 15 14>;
        };

        r_next_window {
            bindings = <&kp LA(TAB)>;
            key-positions = <20 21 22>;
        };

        r_base_layer {
            bindings = <&ht_mo_to 0 0>;
            key-positions = <7 9>;
        };

        r_num_layer {
            bindings = <&ht_mo_to 2 2>;
            key-positions = <19 21>;
        };

        l_tab {
            bindings = <&kp TAB>;
            key-positions = <13 14>;
        };

        l_bksp {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 15>;
        };

        l_del {
            bindings = <&kp DEL>;
            key-positions = <15 14>;
        };

        r_to_sym_layer {
            bindings = <&ht_mo_to 3 3>;
            key-positions = <26 28>;
        };

        l_to_sym_layer {
            bindings = <&ht_mo_to 3 3>;
            key-positions = <31 33>;
        };
    };

    macros {
        moto: moto {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &macro_param_1to2 &ht_mo_to MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
            label = "MOTO";
        };

        delphi_colon_equal: delphi_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp EQUAL>;
            label = "DELPHI_EQUAL";
        };

        ht_lshft_kp: slash {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to2 &ht_kp_kp LSHFT MACRO_PLACEHOLDER>;
            label = "SLASH";
        };

        ht_rshft_kp: ht_rshft_kp {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to2 &ht_kp_kp RSHFT MACRO_PLACEHOLDER>;
            label = "HT_RSHFT_KP";
        };

        ht_rctrl_kp: ht_rctrl_kp {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to2 &ht_kp_kp RCTRL MACRO_PLACEHOLDER>;
            label = "HT_RCTRL_KP";
        };

        ht_lctrl_kp: ht_lctrl_kp {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to2 &ht_kp_kp LCTRL MACRO_PLACEHOLDER>;
            label = "HT_LCTRL_KP";
        };

        ht_lalt_kp: ht_lalt_kp {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to2 &ht_kp_kp LALT MACRO_PLACEHOLDER>;
            label = "HT_LALT_KP";
        };

        ht_ralt_kp: ht_ralt_kp {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to2 &ht_kp_kp RALT MACRO_PLACEHOLDER>;
            label = "HT_RALT_KP";
        };

        ht_lgui_kp: ht_lgnu_kp {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to2 &ht_kp_kp LGUI MACRO_PLACEHOLDER>;
            label = "HT_LGNU_KP";
        };

        ht_rgui_kp: ht_rgui_kp {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to2 &ht_kp_kp LGUI MACRO_PLACEHOLDER>;
            label = "HT_RGUI_KP";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            bindings = <
&kp LGUI   &kp Q           &kp W           &kp E              &kp R                 &kp T        &kp Y    &kp U          &kp I          &kp O           &kp P                   &kp BACKSLASH
&kp LALT   &ht_lctrl_kp A  &ht_lshft_kp S  &ht_lalt_kp D      &ht_lgui_kp F         &kp G        &kp H    &ht_rgui_kp J  &ht_ralt_kp K  &ht_rshft_kp L  &ht_rctrl_kp SEMICOLON  &kp SQT
&kp LCTRL  &kp Z           &kp X           &kp C              &kp V                 &kp B        &kp N    &kp M          &kp COMMA      &kp DOT         &kp SLASH               &mm_tilde_circ
                                           &ht_kp_kp INS ESC  &ht_kp_kp LSHFT CAPS  &kp SPACE    &kp RET  &ht_mo_to 4 4  &kp K_CMENU
            >;
        };

        colemak_layer {
            bindings = <
&trans  &kp Q           &kp W           &kp F          &kp P          &kp B     &kp J   &kp L          &kp U          &kp Y           &kp SEMI        &trans
&trans  &ht_lctrl_kp A  &ht_lshft_kp R  &ht_lalt_kp S  &ht_lgui_kp T  &kp G     &kp M   &ht_rgui_kp N  &ht_ralt_kp E  &ht_rshft_kp I  &ht_rctrl_kp O  &trans
&trans  &kp Z           &kp X           &kp C          &kp D          &kp V     &kp K   &kp H          &trans         &trans          &trans          &trans
                                        &trans         &trans         &trans    &trans  &trans         &trans
            >;
        };

        fn_num_layer {
            bindings = <
&kp LGUI   &kp F1           &kp F2           &kp F3          &kp F4                &none        &mm_xdiv                   &kp N7          &kp N8          &kp N9           &none               &none
&kp LALT   &ht_lctrl_kp F5  &ht_lshft_kp F6  &ht_lalt_kp F7  &ht_lgui_kp F8        &none        &ht_colonequal_kp 0 EQUAL  &ht_rgui_kp N4  &ht_ralt_kp N5  &ht_rshft_kp N6  &ht_rctrl_kp COMMA  &none
&kp LCTRL  &kp F9           &kp F10          &kp F11         &kp F12               &none        &kp MINUS                  &kp N1          &kp N2          &kp N3           &kp DOT             &none
                                             &kp ESC         &ht_kp_kp LSHFT CAPS  &kp SPACE    &kp RET                    &ht_mo_to 4 4   &kp N0
            >;
        };

        sym_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        dev_layer {
            bindings = <
&kp LGUI   &none  &none  &none    &none                  &none        &none    &kp HOME       &kp LC(LS(DOWN))  &kp LC(LS(UP))  &kp END        &none
&kp LALT   &none  &none  &none    &none                  &none        &none    &kp LEFT       &kp DOWN          &kp UP          &kp RIGHT      &none
&kp LCTRL  &none  &none  &none    &none                  &none        &none    &kp LC(LEFT)   &kp LC(LA(DOWN))  &kp LC(LA(UP))  &kp LC(RIGHT)  &none
                         &kp ESC  &ht_kp_kp LSHIFT CAPS  &kp SPACE    &kp RET  &ht_mo_to 4 4  &none
            >;
        };

        adj_layer {
            bindings = <
&tog 7      &none         &none         &none         &none         &none           &none  &none  &none  &none  &none  &studio_unlock
&none       &none         &none         &none         &none         &none           &none  &none  &none  &none  &none  &sys_reset
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none  &none  &none  &none  &none  &none
                                        &none         &none         &none           &none  &none  &none
            >;
        };

        numpad {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans     &kp KP_N7  &kp KP_N8  &kp KP_N9  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans     &kp KP_N4  &kp KP_N5  &kp KP_N6  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp KP_N0  &kp KP_N1  &kp KP_N2  &kp KP_N3  &trans  &trans
                        &trans  &trans  &trans    &trans     &trans     &trans
            >;
        };

        colemak_flag {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        colemak {
            if-layers = <0 7>;
            then-layer = <1>;
        };
    };
};
