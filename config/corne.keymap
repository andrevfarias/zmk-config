/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&ht_kp_sk LSHFT LSHIFT>, <&kt CAPSLOCK>;

            tapping-term-ms = <200>;
        };

        ht_kp_sk: ht_kp_sk {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KP_SK";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        ht_kp_to: ht_kp_to {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KP_TO";
            bindings = <&kp>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
        };

        ht_to_to: ht_to_to {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_TO_TO";
            bindings = <&to>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
        };

        td_gui_mnu: td_gui_mnu {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_GUI_MNU";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI>, <&kp K_APP>;

            tapping-term-ms = <250>;
        };

        ht_mo_to: ht_mo_to {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_MO_TO";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "hold-preferred";
            hold-while-undecided;
        };

        ht_kp_kt: ht_kp_kt {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KP_KT";
            bindings = <&kp>, <&kt>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            hold-while-undecided;
        };

        ht_kp_kp: ht_kp_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KP_KP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "hold-preferred";
        };

        mm_xdiv: mm_xdiv {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_XDIV";
            bindings = <&kp ASTERISK>, <&kp KP_DIVIDE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ht_colonequal_kp: ht_colonequal_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_COLONEQUAL_KP";
            bindings = <&delphi_colon_equal>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };

        mm_tilde_circ: mm_tilde_circ {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_TILDE_CIRC";
            bindings = <&kp TILDE>, <&kp LS(NUMBER_6)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ht_nxtwin_kp: ht_nxtwin_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_NXTWIN_KP";
            bindings = <&next_window>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        /* LAYER NAVIGATION */

        l_to_A_layer {
            bindings = <&ht_mo_to 5 5>;
            key-positions = <1 3>;
        };

        r_to_A_layer {
            bindings = <&ht_mo_to 5 5>;
            key-positions = <8 10>;
        };

        l_to_B_layer {
            bindings = <&ht_mo_to 0 0>;
            key-positions = <2 4>;
        };

        r_to_B_layer {
            bindings = <&ht_mo_to 0 0>;
            key-positions = <7 9>;
        };

        l_to_C_layer {
            bindings = <&ht_mo_to 3 3>;
            key-positions = <13 15>;
        };

        r_to_C_layer {
            bindings = <&ht_mo_to 3 3>;
            key-positions = <20 22>;
        };

        l_to_D_layer {
            bindings = <&ht_mo_to 2 2>;
            key-positions = <14 16>;
        };

        r_to_D_layer {
            bindings = <&ht_mo_to 2 2>;
            key-positions = <19 21>;
        };

        l_to_E_layer {
            bindings = <&ht_mo_to 5 5>;
            key-positions = <25 27>;
        };

        r_to_E_layer {
            bindings = <&ht_mo_to 5 5>;
            key-positions = <34 32>;
        };

        l_to_F_layer {
            bindings = <&ht_mo_to 6 6>;
            key-positions = <28 26>;
        };

        r_to_F_layer {
            bindings = <&ht_mo_to 6 6>;
            key-positions = <31 33>;
        };

        /* RIGHT SYMBOLS */

        r_lbrkt {
            bindings = <&kp LBKT>;
            key-positions = <39 7>;
        };

        r_rbkt {
            bindings = <&kp RBKT>;
            key-positions = <39 8>;
        };

        r_lpar {
            bindings = <&kp LPAR>;
            key-positions = <39 19>;
        };

        r_rpar {
            bindings = <&kp RPAR>;
            key-positions = <39 20>;
        };

        r_lbrc {
            bindings = <&kp LBRC>;
            key-positions = <31 39>;
        };

        r_rbrc {
            bindings = <&kp RBRC>;
            key-positions = <32 39>;
        };

        /* TAB / BACKSPACE / DELETE */

        l_tab {
            bindings = <&kp TAB>;
            key-positions = <13 14>;
        };

        r_tab {
            bindings = <&kp TAB>;
            key-positions = <21 22>;
        };

        l_bksp {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 15>;
        };

        r_bksp {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
        };

        l_del {
            bindings = <&kp DEL>;
            key-positions = <15 14>;
        };

        r_del {
            bindings = <&kp DEL>;
            key-positions = <20 21>;
        };

        /* TAB NAVIGATION */

        l_prev_tab {
            bindings = <&kp LC(LS(TAB))>;
            key-positions = <1 2 3>;
        };

        r_prev_tab {
            bindings = <&kp RC(RS(TAB))>;
            key-positions = <7 8 9>;
        };

        l_next_tab {
            bindings = <&kp LC(TAB)>;
            key-positions = <2 3 4>;
        };

        r_next_tab {
            bindings = <&kp RC(TAB)>;
            key-positions = <8 9 10>;
        };

        /* WINDOW NAVIGATION */

        l_prev_window {
            bindings = <&kp LA(TAB)>;
            key-positions = <13 14 15>;
        };

        r_prev_window {
            bindings = <&kp LA(TAB)>;
            key-positions = <19 20 21>;
        };

        l_next_window {
            bindings = <&ht_nxtwin_kp 0 LA(TAB)>;
            key-positions = <14 15 16>;
        };

        r_next_window {
            bindings = <&kp LA(TAB)>;
            key-positions = <20 21 22>;
        };
    };

    macros {
        moto: moto {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &macro_param_1to2 &ht_mo_to MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
            label = "MOTO";
        };

        delphi_colon_equal: delphi_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp EQUAL>;
            label = "DELPHI_EQUAL";
        };

        next_window: next_window {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(TAB)>, <&macro_press>, <&kp LALT>;

            label = "NEXT_WINDOW";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            bindings = <
&kp LGUI   &kp Q        &kp W        &kp E              &kp R           &kp T      &kp Y    &kp U          &kp I       &kp O        &kp P                &kp BACKSLASH
&kp LALT   &mt LCTRL A  &mt LSHFT S  &mt LALT D         &mt LGUI F      &kp G      &kp H    &mt RGUI J     &mt RALT K  &mt RSHFT L  &mt RCTRL SEMICOLON  &kp SQT
&kp LCTRL  &kp Z        &kp X        &kp C              &kp V           &kp B      &kp N    &kp M          &kp COMMA   &kp DOT      &kp SLASH            &mm_tilde_circ
                                     &ht_kp_kp INS ESC  &mt LSHFT CAPS  &kp SPACE  &kp RET  &ht_mo_to 4 4  &kp K_CMENU
            >;
        };

        colemak_layer {
            bindings = <
&trans  &kp Q        &kp W        &kp F       &kp P       &kp B     &kp J   &kp L       &kp U       &kp Y        &kp SEMI     &trans
&trans  &mt LCTRL A  &mt LSHFT R  &mt LALT S  &mt LGUI T  &kp G     &kp M   &mt RGUI N  &mt RALT E  &mt RSHFT I  &mt RCTRL O  &trans
&trans  &kp Z        &kp X        &kp C       &kp D       &kp V     &kp K   &kp H       &trans      &trans       &trans       &trans
                                  &trans      &trans      &trans    &trans  &trans      &trans
            >;
        };

        fn_num_layer {
            bindings = <
&trans   &kp F1        &kp F2        &kp F3       &kp F4       &none     &mm_xdiv                   &kp N7         &kp N8       &kp N9        &none            &none
&trans   &mt LCTRL F5  &mt LSHFT F6  &mt LALT F7  &mt LGUI F8  &none     &ht_colonequal_kp 0 EQUAL  &mt RGUI N4    &mt RALT N5  &mt RSHFT N6  &mt RCTRL COMMA  &none
&trans   &kp F9        &kp F10       &kp F11      &kp F12      &none     &kp MINUS                  &kp N1         &kp N2       &kp N3        &kp DOT          &none
                                     &trans       &trans       &trans    &trans                     &ht_mo_to 4 4  &kp N0
            >;
        };

        sym_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        dev_layer {
            bindings = <
&trans   &none  &none  &none    &none   &none   &none   &kp HOME      &kp LC(LS(DOWN))  &kp LC(LS(UP))  &kp END        &none
&trans   &none  &none  &none    &none   &none   &none   &kp LEFT      &kp DOWN          &kp UP          &kp RIGHT      &none
&trans   &none  &none  &none    &none   &none   &none   &kp LC(LEFT)  &kp LC(LA(DOWN))  &kp LC(LA(UP))  &kp LC(RIGHT)  &none
                       &trans   &trans  &trans  &trans  &trans        &none
            >;
        };

        adj_layer {
            bindings = <
&none       &none         &none         &none         &none         &none           &none   &none   &none  &none  &none  &studio_unlock
&none       &none         &none         &none         &none         &none           &none   &none   &none  &none  &none  &sys_reset
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none   &none   &none  &none  &none  &none
                                        &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };

        numpad {
            bindings = <
&none  &none  &none  &none   &none   &none    &none     &kp KP_N7  &kp KP_N8  &kp KP_N9  &none  &none
&none  &none  &none  &none   &none   &none    &none     &kp KP_N4  &kp KP_N5  &kp KP_N6  &none  &none
&none  &none  &none  &none   &none   &none    &none     &kp KP_N1  &kp KP_N2  &kp KP_N3  &none  &none
                     &trans  &trans  &trans   &trans    &trans     &kp KP_N0
            >;
        };
    };
};
